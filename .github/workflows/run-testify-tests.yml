name: Testify Tests

on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - customer-os-api * deployed

concurrency:
  group: ${{ github.workflow }}-global
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Go Cache
        id: go-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go Dependencies
        working-directory: ./packages/server/customer-os-api/test/testify
        run: go mod download

      - name: Run Tests and Capture Output
        id: run_tests
        working-directory: ./packages/server/customer-os-api/test/testify
        env:
          TESTIFY_TENANT_API_KEY: ${{ secrets.TESTIFY_TENANT_API_KEY }}
        run: |
          set -o pipefail  # Ensure pipe status is propagated
          go test -v ./... 2>&1 | tee test-output.txt
          exit ${PIPESTATUS[0]}  # Use the exit code from go test, not tee

      - name: Parse Test Results
        if: always()
        id: parse_results
        working-directory: ./packages/server/customer-os-api/test/testify
        run: |
          # Use grep to get just the test results lines
          grep "^---" test-output.txt > test-results.txt
          
          # Count passed and failed tests
          PASSED_TESTS=$(grep -c "^--- PASS:" test-results.txt || echo "0")
          FAILED_TESTS=$(grep -c "^--- FAIL:" test-results.txt || echo "0")
          TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))
          
          # Store results in environment variables
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_ENV
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_ENV
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_ENV
          
          # Debug output
          echo "Detected test counts:"
          echo "Passed: $PASSED_TESTS"
          echo "Failed: $FAILED_TESTS"
          echo "Total: $TOTAL_TESTS"

      - name: Send test results to Slack
        if: always()
        env:
          PASSED_TESTS: ${{ env.passed_tests }}
          FAILED_TESTS: ${{ env.failed_tests }}
          TOTAL_TESTS: ${{ env.total_tests }}
        run: |
          BUILD_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Create message
          MESSAGE="<$BUILD_URL|Testify Test Results>:\n✅ $PASSED_TESTS passed, ❌ $FAILED_TESTS failed ($TOTAL_TESTS total)"
          
          # Add trigger information if it's a repository dispatch
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            TRIGGER_SOURCE=$(echo "${{ github.event.action }}" | cut -d ' ' -f 1)
            NEW_VERSION="${{ github.event.client_payload.version }}"
            OLD_VERSION="${{ github.event.client_payload.old_version }}"
          
            VERSION_INFO=""
            if [ ! -z "$NEW_VERSION" ] && [ ! -z "$OLD_VERSION" ]; then
              VERSION_INFO=" - new version: $NEW_VERSION / old version: v$OLD_VERSION"
            fi
          
            MESSAGE="$MESSAGE\nTriggered by \`$TRIGGER_SOURCE\`$VERSION_INFO"
          fi
          
          curl --fail -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"$MESSAGE\"
          }" ${{ secrets.SLACK_FE_TESTS_WEBHOOK_URL }}