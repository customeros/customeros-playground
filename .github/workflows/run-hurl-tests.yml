name: Hurl Tests

on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - customer-os-api * deployed

concurrency:
  group: ${{ github.workflow }}-global
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Hurl
        run: |
          curl -LO https://github.com/Orange-OpenSource/hurl/releases/download/4.2.0/hurl_4.2.0_amd64.deb
          sudo dpkg -i hurl_4.2.0_amd64.deb

      - name: Make runner script executable
        run: chmod +x ./packages/server/customer-os-api/test/hurl/run-test.sh

      - name: Run Tests and Capture Output
        id: run_tests
        working-directory: ./packages/server/customer-os-api/test/hurl
        env:
          HURL_TENANT_API_KEY: ${{ secrets.HURL_TENANT_API_KEY }}
        run: |
          # Create a function to run Hurl with verbose output
          run_hurl_test() {
            local file="$1"
            echo "Running tests from file: $file"
            hurl --test --verbose --color "$file" 2>&1 | tee -a test-output.txt || {
              local exit_code=$?
              # Extract the actual and expected values from verbose output
              echo "Test failed with exit code $exit_code"
              grep -A 2 "actual:" test-output.txt | tail -n 2
              grep -A 2 "expected:" test-output.txt | tail -n 2
              return $exit_code
            }
          }

          # Run tests and collect results
          failed_files=()
          for test_file in ./**/*.hurl; do
            if ! run_hurl_test "$test_file"; then
              failed_files+=("$test_file")
            fi
          done

          # Set exit code based on test results
          if [ ${#failed_files[@]} -ne 0 ]; then
            echo "The following tests failed:"
            printf '%s\n' "${failed_files[@]}"
            exit 1
          fi

      - name: Parse Test Results
        if: always()
        id: parse_results
        working-directory: ./packages/server/customer-os-api/test/hurl
        run: |
          # Count passed and failed tests from the Test Summary section
          PASSED_TESTS=$(grep -c "✅ Passed:" test-output.txt || echo "0")
          FAILED_TESTS=$(grep -c "❌ Failed:" test-output.txt || echo "0")
          TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))

          # Store results in environment variables
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_ENV
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_ENV
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_ENV